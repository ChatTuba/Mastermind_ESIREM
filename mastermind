
from random import randrange

def secret_code():
    """_summary_
    generation of sequence between colors
    """
    colors = ["R","G","B","Y"]
    lenth_colors = len(colors)

    i = 0
    n = 0
    sequence = []
    color = 0
    while i < lenth_colors:
        sequence.append(randrange(0,lenth_colors))
        i += 1

        #Association of colors meanwhile numbers
    while n < lenth_colors:
        color = sequence[n] 
        sequence[n] = colors[color]
        n += 1
    return(sequence,colors)

def user_code():
    """complementary fonction of bot fcontion. It allow to ask a code to the user.
    """
    user_code = input("give a 4 sequence letter between RGBY\n")
    tab_user_code = (list(user_code.strip()))
    validation = False
    n = 0
    while validation == False:
        #check length
        if len(tab_user_code) != 4:
            print("the lenth of your sequence is false, it must be 4 long\n")
            validation = False
        #check user enter
        while n < 4:

            if tab_user_code[n] != "B" and tab_user_code[n] != "R" and tab_user_code[n] != "G" and tab_user_code[n] != "Y":
                print(tab_user_code[n],"Is not a valid color choose between R,B,G and Y\n")
                validation = False
                
            else :
                validation = True

            n += 1
    return(tab_user_code)

def input_user():
    """
    Put the input in a arry and verify if the sequence is valid
    """
    code,colors = secret_code()
    lenth =len(code)
    validation = False
    while validation == False:
        n = 0
        print("Enter a sequence of ",lenth,"colors \n")
        input_user = input()

        #Put the sequence into a array
        tab_input_user = (list(input_user.strip()))
        #check if the lenth is good
        if len(tab_input_user) != lenth:
            print("the lenth of your sequence is false, it must be,",lenth,"long\n")
            validation = False
        #Verification of the sequence entre by the user
        while n < lenth:

            if tab_input_user[n] != "B" and tab_input_user[n] != "R" and tab_input_user[n] != "G" and tab_input_user[n] != "Y":
                print(tab_input_user[n],"Is not a valid color choose between",colors,"\n")
                validation = False
                
            else :
                validation = True

            n += 1
    return(tab_input_user)
    
def game():
    """_summary_
    Fonction which allow the user to play to the mastermind
    """
    
    max_attempt = 12
    code,colors = secret_code()
    nb_game = 0
    total_game = 0
    length = len(colors)
    play_again = False
    playing = 0
    choice_1 = 0
    choice_2 = 0
    stat_game = open(".Game.txt", "r")
    stat_game.close()

    #user game choice
    print("what do you want to do?")
    while choice_1 == False:
        choice = input(" play (1) , reset statistic (2) or quit the game (3)")
        if choice == "1":
            choice_1 = True
        if choice == "2":
            stat_game = open(".Game.txt", "w")
            stat_game.write("0")
            stat_game.close()
            print("statistics was reset!\n")
            stat_score = open(".Score.txt", "w")
            stat_score.write("score is none\n")
            stat_score.close()
            choice_1 = True
        if choice == "3":
            play_again = True
            choice_1 = True
        if choice != "1" and choice != "2" and choice != "3":
            print("You have to choose between 1,2 and 3!")
            choice_1 = False


    while play_again == False:
        print("Rules: You have to find a sequence of 4 colors:",colors,".\nYou have only",max_attempt," attempts\n")

        #show the number of game and the last score at the start
        stat_game = open(".Game.txt", "r")
        var = str(stat_game.read())
        print("The total of game is:",var,"\n")
        stat_game.close()
        #allow to take only the last line of the file
        #with method will automatically close the file at the end of the block
        with open(".Score.txt", "r") as f: 
            last_score = f.readlines()[-1]
        print("Your last",last_score)

        code,colors = secret_code()
        #print(code)
        attempt = 0
        score = 0
        attempt_left = 0
        while playing == False:
            user_attempt = input_user()
            temp = user_attempt.copy()
            good_place = 0
            good_letter = 0
            #allow to compare the index of list
            correct_indices = [] 
            correct_but_misplaced_indices = []
            i = 0
            n = 0
            j = 0
            k = 0

            #compare the code and the user attempt
            for i in range(length):
                if temp[i] == code[i]:
                    correct_indices.append(i)

            #misplaced
            for i in range(length):
                for n in range(length):
                    if temp[i] == code[n] and i not in correct_indices and n not in correct_indices:
                        correct_but_misplaced_indices.append(i)
                        break 

            good_place = len(correct_indices)
            good_letter = len(correct_but_misplaced_indices)

            playing = False

            print("Correct:",good_place,"Partiel:",good_letter,"\n")
            attempt += 1
            attempt_left = max_attempt - attempt
            print("You got ",attempt_left,"attempts left\n")

            if attempt == max_attempt:
                print("Out of attempt! Try again!\n")
                playing = True
               
            if good_place == 4:
                print("you got the right sequence",user_attempt,"in",attempt,"attempts\n")
                score = attempt - 1
                print("Your score is:",score ,"\n")
                playing = True
                #put the score in a file
                stat_score = open(".Score.txt", "a")
                stat_score.write("\nscore:\t")
                stat_score.write(str(score))
                stat_score.write("\twith\t")
                stat_score.write(str(max_attempt))
                stat_score.write("\tmax attempt.")
                stat_score.close()

        nb_game +=1
        #put the number of game in a file
        stat_game = open(".Game.txt", "r")
        total_game += nb_game
        stat_game.close()
        stat_game = open(".Game.txt", "w")
        stat_game.write(str(total_game))

        #option to play again 
        print("What do you want to do?\n")
        while choice_2 == False:
            last_choice = input("play again (play), reset statisticq (reset) or quit the game (quit)?")
            if last_choice == "play":
                play_again = False
                playing = False
                choice_2 = True
            if last_choice == "reset":
                stat_game = open(".Game.txt", "w")
                stat_game.write("0")
                stat_game.close()
                stat_score = open(".Score.txt", "w")
                stat_score.write("score is none\n")
                stat_score.close()
                print("statistics was reset!")
                play_again = True
                choice_2 = True
            if last_choice == "quit":
                play_again = True
                choice_2 = True
            else:
                print("you have to choose between play reset and quit!")
                choice_2 = False

def bot():
    """fonction to solve intelligibly a game of mastermind
    """
    secret_code = user_code()
    print(secret_code)
    

def main():
    """selection between bot resolution and human resolution
    """
    check = 0

    selection = input("Do you want to play (1) or challenge the bot (2) ?")
    while check == False:
        if selection == "1":
            game()
            check = True
        if selection == "2":
            bot()
            check = True
        else:
            check = False

main()